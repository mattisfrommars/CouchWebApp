# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret="%APPLICATION_SECRET%"

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
slick.dbs.default.driver="slick.driver.H2Driver$"
slick.dbs.default.db.driver="org.h2.Driver"
#slick.dbs.default.db.url="jdbc:h2:mem:play"
slick.dbs.default.db.url="jdbc:h2:tcp://localhost/~/fff"
slick.dbs.default.db.user=sa
slick.dbs.default.db.password=""


# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled
play.evolutions.db.default.autoApply=true

#
# Filters
# ~~~~~
play.http.filters = "framework.utils.Filters"

# Registers the request handler
# ~~~~~
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# The application DI modules
# ~~~~~
play.modules.enabled += "framework.modules.BaseModule"
play.modules.enabled += "framework.modules.BootstrapModule"
play.modules.enabled += "framework.modules.JobModule"
play.modules.enabled += "framework.modules.SilhouetteModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"

play.modules.disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
play.modules.disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }

  # PostMan
  quartz.schedules.SessionMailer {
    expression = "0 25 * * * ?"
    timezone = "UTC"
    description = "Verify if sessions are comming"
  }

  quartz.schedules.SessionMailerOne {
    expression = "0 55 * * * ?"
    timezone = "UTC"
    description = "Verify if sessions are comming"
  }

}


# Play mailer
play.mailer {
  host = "smtp.gmail.com"
  port = 587
  tls = true
  user = "actualizate.comze@gmail.com"
  user = ${?SENDGRID_USERNAME}
  password = "nunoluis12_3"
  password = ${?SENDGRID_PASSWORD}
}

# Security Filter Configuration - Content Security Policy
play.filters.headers {
  contentSecurityPolicy = "default-src 'self';"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' *.fbcdn.net *.opentok.com *.twimg.com *.googleusercontent.com *.tokbox.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com *.tokbox.com *.opentok.com cdn.jsdelivr.net fonts.googleapis.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' 'unsafe-inline' clef.io *.tokbox.com *.opentok.com cdnjs.cloudflare.com;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src *;"
  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" frame-src *.opentok.com clef.io;"
}

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

include "silhouette.conf"